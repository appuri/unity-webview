/*
 * Copyright (C) 2011 Keijiro Takahashi
 * Copyright (C) 2012 GREE, Inc.
 * 
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

#import <UIKit/UIKit.h>

// screenOrientation is adapted from appController.mm
enum ScreenOrientation
{
    kScreenOrientationUnknown,
    portrait,
    portraitUpsideDown,
    landscapeLeft,
    landscapeRight,
    autorotation,
    kScreenOrientationCount
};

// these functions are defined inside appController.mm
// as appcontroller.mm is auto-gen'd we'll have to be careful when upgrading Unity version.
extern UIViewController *UnityGetGLViewController();
extern bool ShouldHandleRotation( ScreenOrientation* outTargetOrient);
extern CGRect ContentRectForOrientation(ScreenOrientation orient);

@interface WebViewPlugin : NSObject<UIWebViewDelegate>
{
    UIWebView *webView;
    NSString *gameObjectName;
}
@end

@implementation WebViewPlugin

- (id)initWithGameObjectName:(const char *)gameObjectName_
{
    self = [super init];
    
    UIView *view = UnityGetGLViewController().view;
    // set orientation based on the current device orientation. the following code
    // are based on the design of the appController.mm, which is auto-generated by Unity - they can change.
    ScreenOrientation targetOrient = portrait;
    ShouldHandleRotation(&targetOrient);
    CGRect frame = ContentRectForOrientation(targetOrient);
    NSLog(@"******************* UIWebView *******************");
    NSLog(@"frame: width = %f, height = %f", frame.size.width, frame.size.height);
    NSLog(@"******************* UIWebView *******************");
    // initialize the webView to the frame size based on the orientation.
    webView = [[UIWebView alloc] initWithFrame:frame];
    // stretches the page to fill the frame area.
    webView.contentMode = UIViewContentModeScaleAspectFit;
    webView.scalesPageToFit = YES;
    webView.autoresizingMask = (UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight);
    webView.delegate = self;
    webView.hidden = YES;
    [view addSubview:webView];
    gameObjectName = [[NSString stringWithUTF8String:gameObjectName_] retain];
    
    return self;
}

- (void)dealloc
{
    [webView removeFromSuperview];
    [webView release];
    [gameObjectName release];
}

- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType
{
    NSString *url = [[request URL] absoluteString];
    UnitySendMessage([gameObjectName UTF8String], "CallFromJS", [url UTF8String]);
    if ([url hasPrefix:@"unity:"]) {
        return NO;
    } else {
        return YES;
    }
}

- (void)setMargins:(int)left top:(int)top right:(int)right bottom:(int)bottom
{
    UIView *view = UnityGetGLViewController().view;
    
    CGRect frame = view.frame;
    CGFloat scale = view.contentScaleFactor;
    frame.size.width -= (left + right) / scale;
    frame.size.height -= (top + bottom) / scale;
    frame.origin.x += left / scale;
    frame.origin.y += top / scale;
    webView.frame = frame;
}

- (void)setVisibility:(BOOL)visibility
{
    webView.hidden = visibility ? NO : YES;
}

- (void)loadURL:(const char *)url
{
    NSString *urlStr = [NSString stringWithUTF8String:url];
    NSURL *nsurl = [NSURL URLWithString:urlStr];
    NSURLRequest *request = [NSURLRequest requestWithURL:nsurl];
    [webView loadRequest:request];
}

- (void)evaluateJS:(const char *)js
{
    NSString *jsStr = [NSString stringWithUTF8String:js];
    [webView stringByEvaluatingJavaScriptFromString:jsStr];
}

@end

extern "C" {
    void *_WebViewPlugin_Init(const char *gameObjectName);
    void _WebViewPlugin_Destroy(void *instance);
    void _WebViewPlugin_SetMargins(void *instance, int left, int top, int right, int bottom);
    void _WebViewPlugin_SetVisibility(void *instance, BOOL visibility);
    void _WebViewPlugin_LoadURL(void *instance, const char *url);
    void _WebViewPlugin_EvaluateJS(void *instance, const char *url);
}

void *_WebViewPlugin_Init(const char *gameObjectName)
{
    id instance = [[WebViewPlugin alloc] initWithGameObjectName:gameObjectName];
    return (void *)instance;
}

void _WebViewPlugin_Destroy(void *instance)
{
    WebViewPlugin *webViewPlugin = (WebViewPlugin *)instance;
    [webViewPlugin release];
}

void _WebViewPlugin_SetMargins(void *instance, int left, int top, int right, int bottom)
{
    WebViewPlugin *webViewPlugin = (WebViewPlugin *)instance;
    [webViewPlugin setMargins:left top:top right:right bottom:bottom];
}

void _WebViewPlugin_SetVisibility(void *instance, BOOL visibility)
{
    WebViewPlugin *webViewPlugin = (WebViewPlugin *)instance;
    [webViewPlugin setVisibility:visibility];
}

void _WebViewPlugin_LoadURL(void *instance, const char *url)
{
    WebViewPlugin *webViewPlugin = (WebViewPlugin *)instance;
    [webViewPlugin loadURL:url];
}

void _WebViewPlugin_EvaluateJS(void *instance, const char *js)
{
    WebViewPlugin *webViewPlugin = (WebViewPlugin *)instance;
    [webViewPlugin evaluateJS:js];
}
